#!/bin/bash
#
# EdgeMAX Wizard "ER-wizard-blockPrivate" created 09/2019 by CPO/BMK for FunkFeuer.at
# Version 20190930
# ^-- previous line is used from bmk-webstatus-package as version identification, dont remove "Version "
# Shortform: ER-wizard-blockPrivate
#
# Github repository: https://github.com/pocki80/ER-wizard-blockPrivate
#
# Works on all EdgeRouter and EdgePoint Devices (system version 1.10.0+)
#

ACTION=$1
INPUT=$2

cfgusrdir="/config/user-data/"
log="/var/log/0xffblockprivate.log"
bootscript="/config/scripts/post-config.d/blockprivate.sh"

#define update sources on github
gitowner="pocki80"
gitrepo="ER-wizard-blockPrivate"
gitbranch="master"

#
# DO NOT EDIT BELOW HERE !
#

echo "EdgeMAX ER-wizard-blockPrivate Wizard started $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log

#base64begin 
# !dont edit or remove this comment!

# remove installtion block
sed -i '/^#base64begin/,/^#base64end$/d' $0
# !dont edit or remove this comment!
#base64end


# function called when you click the wizard
load () {
    echo "Load procedure..." >>$log
    packagestatus='"packagestatus":"ok"'

    ####### wizard version check against github
    # 
    olsrdwizard=""
    for i in $(find /config/wizard/feature/ -name wizard.html); do
        if [[ $(head $i -n 10 | grep 'ER-wizard-blockPrivate') ]]; then
            olsrdwizard=$i
            break
        fi
    done
    if [ ! $olsrdwizard ]; then
        updatetext="error: ER-wizard-blockPrivate wizard.html not found!" >>$log 2>>$log
    else
        CURRENTVERSION=$(head -n 8 $olsrdwizard | grep -i versioninfo= | awk -F"=" {'print $2'})
        if [ $((onlinecheck)) = 0 ]; then
            GITVERSION=$(curl -s --connect-timeout 2 --speed-time 2 https://raw.githubusercontent.com/$gitowner/$gitrepo/$gitbranch/wizard.html | head -n 8 | grep -i versioninfo= | awk -F"=" {'print $2'})
            if [ "$GITVERSION" ] && [ "$CURRENTVERSION" ]; then 
                if [ $(($GITVERSION)) \> $(($CURRENTVERSION)) ]; then 
                    updatetext="new version available: "$GITVERSION", current: "$CURRENTVERSION >>$log 2>>$log
                else
                    updatetext="current version "$CURRENTVERSION" is up-to-date" >>$log 2>>$log
                fi
            else
                updatetext="version info not available. git:"$GITVERSION", current: "$CURRENTVERSION"." >>$log 2>>$log
            fi
        else
            updatetext="version info not available. git:OFFLINE, current: "$CURRENTVERSION"." >>$log 2>>$log
        fi
    fi
    updatestatus=',"updatestatus":"'$updatetext'"'
    # end
    ####### wizard version check against github

    if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "wizard-blockPrivate=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
        autoupdatefromgithub=',"autoupdatefromgithub":"on"'
    fi
    
    
    ####### get interfaces
    # get interfaces
    allintlist=$(ip -o l | awk '{print $2'} | sed -e 's/[:@].*//ig' | grep -E "eth|switch|br|vtun|wrap" | sort)
    blockedintlist=$(iptables -vnL INPUT | awk '$0~/mark match 0x42/ && $3=="REJECT" {print $6}')

    # generate list arrays
    for i in $allintlist; do
        #skip bridge members
        (brctl show | awk '!$5 { if ($4) print $4; else  print $1}' | grep -iwq $i) && continue
        [ $(find /opt/vyatta/config/active/interfaces/switch/*/switch-port/interface/$i 2>/dev/null | wc -l) -eq 0 ] || continue
        intfstatus=""
        echo "$blockedintlist" | grep -wiq "$i" && intfstatus='"enabled":"on",'
        path=$(find /opt/vyatta/config/active/interfaces/ -name description | grep "/$(echo $i | sed -e 's/\./\/vif\//ig')/")
        [ "$path" ] && name=$(cat $path/node.val) || name=""
        interfaces=$interfaces'{'$intfstatus'"interface":"'${i}'","name":"'${name}'"},'
    done
    interfaces=${interfaces%","}
    # end
    ####### get interfaces

    # get all variables together for output
    echo -n "{\"success\":\"1\",\"data\":{ $packagestatus $autoupdatefromgithub $updatestatus ,\"interfaces\":[$interfaces]" &&
    echo -n " }," &&
    echo    " \"definition\":{ }}"
}

change_interface () {
    action="$1"; interface="$2"
    if [ "$interface" ] && (ip -o l | awk '{print $2'} | sed -e 's/[:@].*//ig' | grep -qw "$interface" ); then
        if [ "$action" == "I" ]; then
            ipset -n list | grep -qwi rfc1918     || ipset create rfc1918 hash:net
            ipset test rfc1918 10.0.0.0/8 -q      || ipset add rfc1918 10.0.0.0/8
            ipset test rfc1918 172.16.0.0/12 -q  || ipset add rfc1918 172.16.0.0/12
            ipset test rfc1918 192.168.0.0/16 -q  || ipset add rfc1918 192.168.0.0/16
            iptables -t mangle -C PREROUTING -m set --match-set rfc1918 dst -j MARK --set-mark 66 2>/dev/null            || iptables -t mangle -I PREROUTING -m set --match-set rfc1918 dst -j MARK --set-mark 66
            iptables -C INPUT   -i $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited 2>/dev/null  || iptables -I INPUT   -i $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited
            iptables -C FORWARD -o $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited 2>/dev/null  || iptables -I FORWARD -o $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited
            iptables -C FORWARD -i $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited 2>/dev/null  || iptables -I FORWARD -i $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited
            iptables -C OUTPUT  -o $interface -m set --match-set rfc1918 dst -j REJECT --reject-with icmp-net-prohibited 2>/dev/null  || iptables -I OUTPUT  -o $interface -m set --match-set rfc1918 dst -j REJECT --reject-with icmp-net-prohibited
        elif [ "$action" == "D" ]; then
            iptables -C INPUT   -i $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited 2>/dev/null  && iptables -D INPUT   -i $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited
            iptables -C FORWARD -o $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited 2>/dev/null  && iptables -D FORWARD -o $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited
            iptables -C FORWARD -i $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited 2>/dev/null  && iptables -D FORWARD -i $interface -m mark --mark 66 -j REJECT --reject-with icmp-net-prohibited
            iptables -C OUTPUT  -o $interface -m set --match-set rfc1918 dst -j REJECT --reject-with icmp-net-prohibited 2>/dev/null  && iptables -D OUTPUT  -o $interface -m set --match-set rfc1918 dst -j REJECT --reject-with icmp-net-prohibited
            [ $(iptables -vnL INPUT | awk '$0~/mark match 0x42/ && $3=="REJECT" {print $6}' | wc -l) -eq 0 ] && 
                iptables -t mangle -C PREROUTING -m set --match-set rfc1918 dst -j MARK --set-mark 66 2>/dev/null &&
                iptables -t mangle -D PREROUTING -m set --match-set rfc1918 dst -j MARK --set-mark 66
        else
            echo "Action $action not recognized, should be I or D"
            return 3
        fi
    else
        echo "Interface $interface not recognized"
        return 4
    fi
    return 0
}


# function called when you click apply
apply () {
    echo "Apply procedure..." >>$log
    updatefromgithub=$(jq -M -r '.updatefromgithub' $INPUT)
    if [[ "$updatefromgithub" == "on" ]]; then
        echo "update from github requested" >>$log 2>>$log
        olsrdwizard=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep 'ER-wizard-blockPrivate') ]]; then
                olsrdwizard=$i
                break
            fi
        done
        if [ ! $olsrdwizard ]; then
            echo "error: ER-wizard-blockPrivate wizard.html not found!" >>$log 2>>$log
        elif [ $((onlinecheck)) != 0 ]; then
            echo "currently offline" >>$log 2>>$log
        else
            curl -s -o /tmp/ER-wizard.tar.gz --connect-timeout 2 --speed-time 2 https://codeload.github.com/$gitowner/$gitrepo/legacy.tar.gz/$gitbranch >>$log 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
              set $LINE
              if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
              [ -f "/tmp/"$LINE ] && [ $W == "1" ] && cp "/tmp/"$LINE $(dirname $olsrdwizard)"/"$(basename $LINE) >>$log 2>>$log
            done < /tmp/result.txt
            rm /tmp/result.txt >>$log 2>>$log
            rm -Rf /tmp/$gitowner-$gitrepo* >>$log 2>>$log
            chmod 755 $(dirname $olsrdwizard)"/"wizard-run >>$log 2>>$log
            $(dirname $olsrdwizard)"/"wizard-run load >>$log 2>>$log
        fi
    fi
    autoupdatefromgithub=$(jq -M -r '.autoupdatefromgithub' $INPUT)
    if [[ "$autoupdatefromgithub" == "on" ]]; then
        #check for auto-update wizard, install if not there!!
        wiz=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep "ER-wizard-AutoUpdate") ]]; then
                wiz=$i
                break
            fi
        done
        if [ ! $wiz ]; then 
            #autoupdate-wizard mit scripten fehlt: offline-install
            wiz="/config/wizard/feature/AutoUpdate/wizard.html"
            echo "Installing "$(dirname $wiz)"..." >>$log 2>>$log
            if [ ! -d $(dirname $wiz) ]; then 
                mkdir $(dirname $wiz) >>$log 2>>$log
                chmod --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
                chown --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
            fi
            #extract offline --> replaces download-procedure, Version 20181001, https://github.com/pocki80/ER-wizard-AutoUpdate
            echo "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
" | base64 -d >/tmp/ER-wizard.tar.gz 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
                set $LINE
                if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
                if [ -f "/tmp/"$LINE ] && [ $W == "1" ]; then
                    sudo cp "/tmp/"$LINE $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chmod --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chown --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                fi
            done < /tmp/result.txt
            rm /tmp/result.txt
            rm -Rf /tmp/$git2owner-$git2repo* >>$log 2>>$log
            chmod 755 $(dirname $wiz)"/"wizard-run >>$log 2>>$log
            echo "Installing done, now triggering initial load..." >>$log 2>>$log
            $(dirname $wiz)"/"wizard-run load  >>$log 2>>$log
        fi
        #remove "no" if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-blockPrivate=no" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-blockPrivate=no" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        fi
        if [ ! -f /config/user-data/autoupdate.dat ]; then
            #create settings file if missing
            echo 'wizard-blockPrivate=yes' >/config/user-data/autoupdate.dat 2>>$log
            echo '' >>/config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        else
            #add yes line if missing
            if [ "$(grep -i "wizard-blockPrivate=yes" /config/user-data/autoupdate.dat |wc -l)" == "0" ]; then
                echo 'wizard-blockPrivate=yes' >>/config/user-data/autoupdate.dat 2>>$log
                echo '' >>/config/user-data/autoupdate.dat 2>>$log
                sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            fi
        fi
    else
        #remove yes line if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-blockPrivate=yes" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-blockPrivate=yes" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            curl -so /dev/null --connect-timeout 2 --speed-time 2 "https://ff.cybercomm.at/aulog/logthis.php?w=off-blockPrivate&r="$(hostname) >/dev/null 2>/dev/null
        fi
    fi
    # end
    ####### wizard manual update from github
    
    allintlist=$(ip -o l | awk '{print $2'} | sed -e 's/[:@].*//ig' | grep -E "eth|switch|br|vtun|wrap" | sort)
    blockedintlist=$(iptables -vnL INPUT | awk '$0~/mark match 0x42/ && $3=="REJECT" {print $6}')
    enabledintlist=$(jq -M -r '.interfaces[]  | select (.enabled=="on") | .interface' $INPUT)
    for i in $allintlist; do
        if (echo "$enabledintlist" | grep -iwq "$i") && ! (echo "$blockedintlist" | grep -iwq "$i"); then
            echo "enable $i for blocking!" >>$log
            change_interface I $i >>$log 2>>$log
        fi
        if (echo "$blockedintlist" | grep -iwq "$i") && ! (echo "$enabledintlist" | grep -iwq "$i"); then
            echo "disable $i for blocking!" >>$log
            change_interface D $i >>$log 2>>$log
        fi
    done

    #make settings boot-resistant
    if [ "$enabledintlist" ]; then
        echo '#!/bin/bash' >$bootscript
        sed -n "/^change_interface ()/,/^}/p" $0 >>$bootscript
        echo "for i in "$(echo $enabledintlist)"; do" >>$bootscript
        echo "  echo Boottime init for interface \$i >>$log" >>$bootscript
        echo "  change_interface I \$i >>$log 2>>$log" >>$bootscript
        echo "done" >>$bootscript
        echo "exit 0" >>$bootscript
        chmod 755 $bootscript
    else
        [ -f $bootscript ] && rm $bootscript
    fi

    # for debugging purposes
    cp $INPUT /tmp/result.json

    # $ret and $output comes from port change
    if [ "$ret" == "1" ]; then
        echo "{\"success\":\"0\",\"error\": \"${output//\"/\'}\"}"
    else
        echo "{\"success\":\"1\"}"
    fi
}

case "$ACTION" in
    load)
        load
        ;;
    apply)
        apply
        ;;
esac

echo "EdgeMAX ER-wizard-blockPrivate Wizard ended $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
